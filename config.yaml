name: Velodrome_v2
description: Multi-chain indexer for Velodrome V2 on Optimism and Aerodrome on Base
# Global contracts configuration that will be shared across all chains that are defined later in the config file
# (i.e. Velodrome V2 on Optimism and Aerodrome on Base)
contracts:
  # PoolFactory contract is responsible for creating new pools
  - name: PoolFactory
    handler: src/EventHandlers.ts
    events:
      - event: PoolCreated(address indexed token0, address indexed token1, bool indexed stable, address pool, uint256 unnamed)
        requiredEntities:
          - name: StateStore
            labels: ["stateStore"]
          - name: Token
            arrayLabels:
              - poolTokens
        isAsync: true
  # Pool contract emits all the events related to a particular swap pool
  - name: Pool
    handler: src/EventHandlers.ts
    events:
      # Used to update the total fees earned by a swap pool
      - event: Fees(address indexed sender, uint256 amount0, uint256 amount1)
        requiredEntities:
          - name: LiquidityPool
      # Used to update the swap and volume metrics of a particular pool and user
      - event: Swap(address indexed sender, address indexed to, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out)
        requiredEntities:
          - name: LiquidityPool
          - name: LiquidityPoolUserMapping
            labels: ["poolUserMapping"]
          - name: User
            labels: ["user"]
      # Used to update the liquidity values of a particular pool
      - event: Sync(uint256 reserve0, uint256 reserve1)
        requiredEntities:
          - name: StateStore
            labels: ["stateStore"]
          - name: LiquidityPool
            labels:
              - singlePool
            arrayLabels:
              - stablecoinPools
              - whitelistedPools
          - name: Token
            arrayLabels:
              - whitelistedTokens
  # PriceFetcher contract is responsible for fetching the price of a particular token
  - name: PriceFetcher
    handler: src/EventHandlers.ts
    events:
      # Used to update the price of a particular token in USD
      - event: PriceFetched(address indexed token, uint256 price)
        requiredEntities:
          - name: Token
  # Voter contract is responsible for creating reward contracts and distributing rewards to the liquidity pools
  - name: Voter
    handler: src/EventHandlers.ts
    events:
      # Used to update the reward emission metrics of a particular pool
      - event: DistributeReward(address indexed sender, address indexed gauge, uint256 amount)
        requiredEntities:
          - name: LiquidityPool
            labels:
              - emissionSinglePool
          - name: Token
            labels:
              - emissionRewardToken
      # Used to update the reward address details of a particular pool
      - event: GaugeCreated(address indexed poolFactory, address indexed votingRewardsFactory, address indexed gaugeFactory, address pool, address bribeVotingReward, address feeVotingReward, address gauge, address creator)
        requiredEntities:
          - name: LiquidityPool
  # VotingReward contract is responsible for distributing bribe rewards to the liquidity providers
  - name: VotingReward
    handler: src/EventHandlers.ts
    events:
      # Used to update the bribe reward metrics of a particular pool
      - event: NotifyReward(address indexed from, address indexed reward, uint256 indexed epoch, uint256 amount)
        requiredEntities:
          - name: LiquidityPool
            labels:
              - bribeSinglePool
          - name: Token
            labels:
              - bribeRewardToken
# Used to define the different chains that contracts (defined above) will be indexed from
networks:
  - id: 10 # Optimism
    start_block: 0
    # Specification of addresses per contract type defined above
    contracts:
      - name: PoolFactory
        address:
          - 0xF1046053aa5682b4F9a81b5481394DA16BE5FF5a
      - name: Pool
      - name: PriceFetcher
        address:
          - 0x11BbF869250424BEDC5f162094afF8b4A45bE841
          - 0xe255e0774416604dd53f75ea8301157dcce6eb03
      - name: Voter
        address:
          - 0x41C914ee0c7E1A5edCD0295623e6dC557B5aBf3C
      - name: VotingReward
  - id: 8453 # Base
    start_block: 0
    # Specification of addresses per contract type defined above
    contracts:
      - name: PoolFactory
        address:
          - 0x420DD381b31aEf6683db6B902084cB0FFECe40Da
      - name: Pool
      - name: PriceFetcher
        address:
          - 0x593d092bb28ccefe33bfdd3d9457e77bd3084271
      - name: Voter
        address:
          - 0x16613524e02ad97eDfeF371bC883F2F5d6C480A5
      - name: VotingReward
