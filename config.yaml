name: Velodrome_v2
description: Multi-chain indexer for Velodrome V2 on Optimism and Aerodrome on Base
# Global contracts configuration that will be shared across all chains that are defined later in the config file
# (i.e. Velodrome V2 on Optimism and Aerodrome on Base)
contracts:
  # PoolFactory contract is responsible for creating new pools
  - name: PoolFactory
    handler: src/EventHandlers.ts
    events:
      - event: PoolCreated(address indexed token0, address indexed token1, bool indexed stable, address pool, uint256 unnamed)
        requiredEntities:
          - name: StateStore
            labels: ["stateStore"]
          - name: Token
            arrayLabels:
              - poolTokens
        isAsync: true
  # Pool contract emits all the events related to a particular swap pool
  - name: Pool
    handler: src/EventHandlers.ts
    events:
      # Used to update the total fees earned by a swap pool
      - event: Fees(address indexed sender, uint256 amount0, uint256 amount1)
        requiredEntities:
          - name: LiquidityPool
      # Used to update the swap and volume metrics of a particular pool and user
      - event: Swap(address indexed sender, address indexed to, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out)
        requiredEntities:
          - name: LiquidityPool
          - name: LiquidityPoolUserMapping
            labels: ["poolUserMapping"]
          - name: User
            labels: ["user"]
      # Used to update the liquidity values of a particular pool
      - event: Sync(uint256 reserve0, uint256 reserve1)
        requiredEntities:
          - name: StateStore
            labels: ["stateStore"]
          - name: LiquidityPool
            labels:
              - singlePool
            arrayLabels:
              - stablecoinPools
              - whitelistedPools
          - name: Token
            arrayLabels:
              - whitelistedTokens
  # PriceFetcher contract is responsible for fetching the price of a particular token
  - name: PriceFetcher
    handler: src/EventHandlers.ts
    events:
      # Used to update the price of a particular token in USD
      - event: PriceFetched(address indexed token, uint256 price)
        requiredEntities:
          - name: Token
  # Voter contract is responsible for creating reward contracts and distributing rewards to the liquidity pools
  - name: Voter
    handler: src/EventHandlers.ts
    events:
      # Used to update the reward emission metrics of a particular pool
      - event: DistributeReward(address indexed sender, address indexed gauge, uint256 amount)
        requiredEntities:
          - name: LiquidityPool
            labels:
              - emissionSinglePool
          - name: Token
            labels:
              - emissionRewardToken
      # Used to update the reward address details of a particular pool
      - event: GaugeCreated(address indexed poolFactory, address indexed votingRewardsFactory, address indexed gaugeFactory, address pool, address bribeVotingReward, address feeVotingReward, address gauge, address creator)
        requiredEntities:
          - name: LiquidityPool
  # VotingReward contract is responsible for distributing bribe rewards to the liquidity providers
  - name: VotingReward
    handler: src/EventHandlers.ts
    events:
      # Used to update the bribe reward metrics of a particular pool
      - event: NotifyReward(address indexed from, address indexed reward, uint256 indexed epoch, uint256 amount)
        requiredEntities:
          - name: LiquidityPool
            labels:
              - bribeSinglePool
          - name: Token
            labels:
              - bribeRewardToken
# Used to define the different chains that contracts (defined above) will be indexed from
networks:
  - id: 10 # Optimism
    start_block: 0
    # Specification of addresses per contract type defined above
    contracts:
      - name: PoolFactory
        address:
          - 0xF1046053aa5682b4F9a81b5481394DA16BE5FF5a
      - name: Pool
        address:
          - 0x0493Bf8b6DBB159Ce2Db2E0E8403E753Abd1235b # vAMM-WETH/USDC.e
          - 0xd25711EdfBf747efCE181442Cc1D8F5F8fc8a0D3 # vAMMV2-WETH/OP
          - 0xe9581d0F1A628B038fC8B2a7F5A7d904f0e2f937 # vAMMV2-OP/VELO
          - 0xE5F28Fc43Bb40CDF7202ebe406793815b6f07FbD # vAMMV2-THALES/USDC.e
          - 0x8134A2fDC127549480865fB8E5A9E8A8a95a54c5 # vAMMV2-USDC/VELO
          - 0x0df083de449F75691fc5A36477a6f3284C269108 # vAMMV2-OP/USDC
          - 0x58e6433A6903886E440Ddf519eCC573c4046a6b2 # vAMMV2-WETH/VELO
          - 0x7A7f1187c4710010DB17d0a9ad3fcE85e6ecD90a # vAMMV2-RED/VELO
          - 0x6387765fFA609aB9A1dA1B16C455548Bfed7CbEA # vAMM-WETH/LUSD
          - 0x37e7D30CC180A750C83D68ED0C2511dA10694d63 # sAMMV2-USD+/LUSD
          - 0x585Af0b397AC42dbeF7f18395426BF878634f18D
          - 0x7959EB3Ad41dDAaF114e0BE9833E9B4f79db3081
          - 0x1c8d7fc2eAa85af18188f7619b99f939Db34836d
          - 0x6d1A334eF70b65a2d39cE04C3F916DF93b3a2952
          - 0xB2791477DA69DDe9cd2986349F8855B8E2dA7245
          - 0x904f14F9ED81d0b0a40D8169B28592aac5687158
          - 0x41cC89B91D0abe260F2cB53C1ABDa07b321E71Df
          - 0x6e6046E9b5E3D90eac2ABbA610bcA725834Ca5b3
          - 0x1AD06Ca54de04DBe9e2817F4C13eCB406DCbeAf0
          - 0xC5c247580A4A6E4d3811c0DA6215057aaC480bAc
          - 0x11FE68d9f9D951E2ae8758D8A5134A2ff6258397
          - 0xdC3E1A8d4bd5d97e7bBa2bee6d6465FEA6998141
          - 0xDeFCaC75247C6a3e09f1A72fdCa311DC883F7573
          - 0x04730579f1468C06530ae3a84B7D5c233f3a130D
          - 0x3e237351e3Afdb367BB0F45D792b0204846fBBbc
          - 0xD32b41C1313cC383f9d1B65c59bC2829B6D3EE81
          - 0x4ffCFbF4c01746DAfc3fe0719Ab3A83814130f22
          - 0x4ed90ca704F4f6f3955169F202EA35365e41B424
          - 0x0e88a5bfF34d39DA66bdD32B82dC89a32D7Bb6c9
          - 0x25C488e5F69aC334ac1e8f786D890A97ec1bF713
          - 0xB720FBC32d60BB6dcc955Be86b98D8fD3c4bA645
          - 0x71d53B5B7141E1ec9A3Fc9Cc48b4766102d14A4A
          - 0xF31cbe21Bbbb8056b75d6ca21e8fFd2CD38bD5C5
          - 0x917AA69D539D6518440dd0BEA2eaAc142a8d5610
          - 0x45922aE4B90297A2d8655ba1Ed354aDBC489dC94
          - 0x3DD9556a521d6e57bE480c94da102fedf0429aba
          - 0xFF5318f81Dd791e92d51b8A54fA3538832D2890D
          - 0xaF03f51DE7a0E62BF061F6Fc3931cF79166B0a29
          - 0x56770b94279539416855fe29Ef14b26438B5e421
          - 0x667002F9DC61ebcBA8Ee1Cbeb2ad04060388f223
          - 0x8F47041aDbeF5BF321c9F63A0660326614ab6B60
          - 0x0b28C2e41058EDc7D66c516c617b664Ea86eeC5d
          - 0x85bB876Cbb202bD77704a4Fb7e4EcBeCEbd4cdf7
          - 0xB2Adb87f301B75035Ec61E87C63ef3fbddf2B1D9
          - 0x25638DdDA5AD255308accD17d5f225837A36B9aB
          - 0x20A068f6940b28338363E8B01B07C21c1D5f197B
          - 0xfe95120AF843EBC758e1974C3cAB556257A9f333
          - 0x30dB561826b820299F0BEF9B8bd8946127b9D89A
          - 0x966E6059a8Ec0bDb03eB2BD21F34F7CeF75A63FC
          - 0xEfa74728DbDA583B16622E17937F4577E2846c0f
          - 0x6e74fD411e7c3E858678e5385B922f0a2E288fe5
          - 0xa3031D9FD5010496a2bAF8AFCE27Ef6f3849FB10
          - 0x3f42Dc59DC4dF5cD607163bC620168f7FF7aB970
          - 0x3B375bA61920551217f5944F4F5d8a63989A438e
          - 0x1f8b46abe1EAbF5A60CbBB5Fb2e4a6A46fA0b6e6
          - 0x9005c76474948AF6aCa879A112B2E0FFd333128e
          - 0xacdE89BcFc54ec2237ed3693EdB8c51F74dd2252
          - 0xC1E5b706d5b5FEc9aAca710fc03dcBD4356fb247
          - 0x85f096EbA10FC87769d042E37df3DCD1B51cf8c7
          - 0x1Bf31A0932A0035c532A7b1DCB94ffe0b35aed14
          - 0x45f714d89B383f213B32A89003c2D6F813B3CDA3
          - 0xDAe6D2e3472d780c6E6A3Dbf053514451BDacc2D
          - 0x9A166C75587f30D2b9207b53960E9Dc6B37E1235
          - 0x352717910966DbAC3F0c17CA1C1aAe269Cf85036
          - 0x0a53F5EDe53f4d75a5dF9D8f1E3C23E2672ebDA7
          - 0x6d27db16175741717543135ae1f27308D2909Be8
          - 0x10df8a154C806f74C589466214b1C831c2315173
          - 0xebCfdAD0015036fC99691d145127dF1764D50a6f
          - 0x4Ec77c33bD56d2151ACE9f28F6cA27601410e858
          - 0x652B38D5a6b8F7F08E3bc86275BDebB9803973F2
          - 0x0af32614EEa68B8D2232B9592FbdB6512ab6DA73
          - 0x0f0509443b7fca172f5428580468A403b2924504
          - 0xb1786ddd79752969660E2d8f1FAa9df2C88F5a3e
          - 0x5d3150ca6fF66a77Ee77eA110424037440b3Ef44
          - 0xd956aAB64cC3F9e2a9a4bCb2BCB9dE565A404B71
          - 0xB0A8194DC73fC6B2aA52757c514BC788B84B9163
          - 0x1BAfB8120f6faaa72465f828BA536A828a89475d
          - 0xEA3A5f56014b146A39D026Fc459304378C2Ea24F
          - 0x533b22a3015E60944799c2c46d6C08e7535686aB
          - 0x31a56BC24B24F5E570a9a01b315A31fd43cb9c4A
          - 0xd1F87E26797CE4CD1D5b37F5e6A9Ee589865644E
          - 0x83FC89bda2914b740D389F0549c60Bd808541c99
          - 0xa8E4fA96327C5a93e159Bd781F3CCfD860519d82
          - 0x815357CaC24319a269304E45a5a56E6c2AbB0Cc8
          - 0xB545592E38b603F4A904a5260A6ffC538BfcB424
          - 0x457Fd55a2d4b159679379861b470C846cff946eb
          - 0x579e50e381a3129893EBcf979cF0D9EDc3D46dC9
          - 0xB52b8cfbCf5c177feB99870D3E2dD02933553933
          - 0x72Aba20779797904bd395b7c69B4f9fB29CBb653
          - 0x814e2d6E8f7477329BB6C196111A08464ABE11DD
          - 0x83e782c52CC0b834464c4a560C82610150f0850E
          - 0x475C92F613dBE3bD5D1A4F5fcafa0725cAd57256
          - 0xf984d3e3420784a38c1884c3D63e373CF2d2de1c
          - 0xC035eb8b5a5EC5bc43f65441077801e0Fa89E9d8
          - 0x21f75B66Fe2e3A18ebCd6D7524733e9C70362373
          - 0x0680A285dbB887EfCE41c1fdE31002BD4fBd6378
          - 0xd6ac2264A19812632F942E4dAa9b1F95eC69de38
          - 0x2890B76b1e629641026957Accca9f6EF6215D64E
          - 0xE79B7dbDD5838D150A7aD0AF8d8b165197b31f79
          - 0x0C3A7AA27A6E14b7a92e09456B0970aB71cc0598
          - 0xfECc8874B6E82cc51016B92a9d622aA945478EFA
          - 0xB762Df5893A137D730D588F05aCe1166974e0429
          - 0xa80ad5C1f8C21b34b427EA432530aE7fF36e3926
          - 0x6Ea71D6ef05aFF4B503A924F2C5d76DFe5B85225
          - 0x0D0F65C63E379263f7CE2713dd012180681D0dc5
          - 0x5e4A183Fa83C52B1c55b11f2682f6a8421206633
          - 0x537cB4D4fE1a9dF1E295872f2B82c1da9df7500f
          - 0x4BE2CBE40521279b8fc561e65Bb842bf73ec3a80
          - 0x19715771E30c93915A5bbDa134d782b81A820076
          - 0x8542DD4744edEa38b8a9306268b08F4D26d38581
          - 0xDB61f9B480f0a8B817811cFAA89A1c219c355224
          - 0x2B47C794c3789f499D8A54Ec12f949EeCCE8bA16
          - 0xD330841EF9527E3Bd0abc28a230C7cA8dec9423B
          - 0xBE418771bC91F75C4d2BcE1d5E2b7286F50992da
          - 0xe8B8bfF1E415258eb3d5FA8DeeE9C38406e609cd
          - 0x77b6d0279c9cEF559Ef7c32c31d9a5d8Acb664FE
          - 0x9c78dA24F2843CCDD02085bDEc2484106554ca48
          - 0x6dA98Bde0068d10DDD11b468b197eA97D96F96Bc
          - 0xc0a0adF5E3b07e383C2c1533B2f0878A3195C622
          - 0x7e1357fa56C0eCfE69dAF22E08489aE8De56d86C
          - 0xE39120b27e5bfeC953524402C2e261763c76519E
          - 0x4E60495550071693bc8bDfFC40033d278157EAC7
          - 0xeFe139aa71b674168f5823360A824B3714f2718D
          - 0x5e5A37445FadeB71f23514Ae7d675Ffc644e5E5A
          - 0x60BE3FB22DDF30C17604b86eC005F6173B1170Aa
          - 0xA5EDb0EF932f7c2f37B8FC75CB01948F6258a4f8
          - 0x6C23fA7EC9eEa627261C4a0978664eA592ca0E19
          - 0x9f95AF94518694c212394977CACaf43313981835
          - 0xC4270d957C218d263e7FAE5a3bEEDC1E98B6012D
          - 0xcf803EA54642aed9bFBc3Aa324C3657BCAD20c61
          - 0x62191C893DF8d26aC295BA1274a00975dc07190C
          - 0x6d5BA400640226e24b50214d2bBb3D4Db8e6e15a
          - 0x7178F61694ba9109205B8d6F686282307625e62D
          - 0x5e6E17F745fF620E87324b7c6ec672B5743BD0B4
          - 0xd95E98fc33670dC033424E7Aa0578D742D00f9C7
          - 0x6B95147a8d2c7f480C0CF7288FCf268400CE9970
          - 0xe0A1467A9d86d9F433496c48c6831c0142464CE6
          - 0xda0253a7cDcCc4b4DEfBbEf863dbA1294bF5e3B1
          - 0xf04458f7B21265b80FC340dE7Ee598e24485c5bB
          - 0x7e0F65FAB1524dA9E2E5711D160541cf1199912E
          - 0xE5F28Fc43Bb40CDF7202ebe406793815b6f07FbD
          - 0xa1055762336F92b4B8d2eDC032A0Ce45ead6280a
          - 0xeD47E3ce6D9C05F562C469AB1bf1244cc697aa73
          - 0xE54e4020d1C3afDB312095D90054103E68fe34B0
          - 0xc37a0a37664aeB3848f98C5dD5d7AE286A1E9Ebd
          - 0x8453cc52F2108fF9D1636B6A108dB06Ac137B72F
          - 0x615B9dd61f1F9a80f5bcD33A53Eb79c37b20adDC
          - 0x5DA5e8a46D435D619A12086620Bc77bF7fB043E5
          - 0xDFF90E4A6c229565f25337B1DB9fA12f6d8cB118
          - 0x4E316557f63C2156eAFdfec08f31DF4957136203
          - 0xfA09479d72E2b3f8B6dF63399772237Ad6658D76
          - 0x4d7959d17B9710BE87e3657e69d946914221BB88
          - 0x1cdfAe29a66b39C30Eb2b090a2dbba562026e9FF
          - 0xD4929A10a10eA11B768BfAc92541FE5A26c794ce
          - 0xf7a73e1995030B0198f8d6e528a1c42ACEf90a4c
          - 0x832a6141710Fcda30F4e88305d20fE1603C61cab
          - 0x3F95E57C7ce7cA478d7A4f0eE6072F39120E3689
          - 0x6443907dF3EB515dcb53f157C078C8Ec7263a7F4
          - 0x88391365c225973032275DB256b9D15F845D2C72
          - 0xDB1FE6DA83698885104DA02A6e0b3b65c0B0dE80
      - name: PriceFetcher
        address:
          - 0x11BbF869250424BEDC5f162094afF8b4A45bE841
          - 0xe255e0774416604dd53f75ea8301157dcce6eb03
      - name: Voter
        address:
          - 0x41C914ee0c7E1A5edCD0295623e6dC557B5aBf3C
      - name: VotingReward
  - id: 8453 # Base
    start_block: 0
    # Specification of addresses per contract type defined above
    contracts:
      - name: PoolFactory
        address:
          - 0x420DD381b31aEf6683db6B902084cB0FFECe40Da
      - name: Pool
        address:
          - 0xB4885Bc63399BF5518b994c1d0C153334Ee579D0 # vAMM-WETH/USDbC
          - 0x9287C921f5d920cEeE0d07d7c58d476E46aCC640 # vAMM-WETH/DAI
          - 0x0B25c51637c43decd6CC1C1e3da4518D54ddb528 # sAMM-DOLA/USDbC
      - name: PriceFetcher
        address:
          - 0x593d092bb28ccefe33bfdd3d9457e77bd3084271
      - name: Voter
        address:
          - 0x16613524e02ad97eDfeF371bC883F2F5d6C480A5
      - name: VotingReward
