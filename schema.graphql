type LiquidityPoolNew {
  id: ID! # pool address
  chainID: BigInt! @precision(digits: 76) # chain id of the pool
  name: String! # name of the pool
  token0: Token! # token0 entity
  token1: Token! # token1 entity
  isStable: Boolean! # whether the pool is a stable AMM or a volatile AMM
  reserve0: BigInt! @precision(digits: 76) # reserve of token0 in token units
  reserve1: BigInt! @precision(digits: 76) # reserve of token1 in token units
  totalLiquidityUSD: BigInt! @precision(digits: 76) # total liquidity of the swap pool in USD
  totalVolume0: BigInt! @precision(digits: 76) # total swap volume of token0 in token units
  totalVolume1: BigInt! @precision(digits: 76) # total swap volume of token1 in token units
  totalVolumeUSD: BigInt! @precision(digits: 76) # total swap volume of the pool in USD
  totalFees0: BigInt! @precision(digits: 76) # total fees collected in token0 units
  totalFees1: BigInt! @precision(digits: 76) # total fees collected in token1 units
  totalFeesUSD: BigInt! @precision(digits: 76) # total fees collected in USD
  numberOfSwaps: BigInt! @precision(digits: 76) # total number of swaps in the pool
  token0Price: BigInt! @precision(digits: 76) # price of token0 relative to token1
  token1Price: BigInt! @precision(digits: 76) # price of token1 relative to token0
  totalEmissions: BigInt! @precision(digits: 76) # total emissions for the pool in reward token units (VELO form Optimism and AERO for Base)
  totalEmissionsUSD: BigInt! @precision(digits: 76) # total emissions for the pool in USD
  totalBribesUSD: BigInt! @precision(digits: 76) # total bribes for the pool in USD
  lastUpdatedTimestamp: Timestamp! # timestamp of last update
  liquidityPoolHourlySnapshots: [LiquidityPoolHourlySnapshot!]!  # hourly snapshots of the pool
    @derivedFrom(field: "pool")
  liquidityPoolDailySnapshots: [LiquidityPoolDailySnapshot!]!  # daily snapshots of the pool
    @derivedFrom(field: "pool")
  liquidityPoolWeeklySnapshots: [LiquidityPoolWeeklySnapshot!]!  # weekly snapshots of the pool
    @derivedFrom(field: "pool")
}

# Entity for tracking a unique address in the `to` or `from` of a swap event
# Other liquidity pools don't count as users
type User {
  id: ID! # user address
  numberOfSwaps: BigInt! @precision(digits: 76) # total number of swaps the user has made
  joined_at_timestamp: Timestamp! # timestamp of the user's first swap (or being swapped to), Not accurate if run in multihead unordered mode.
}

# Hourly snapshot of the LiquidityPool entity
type LiquidityPoolHourlySnapshot {
  id: ID! # address of the pool - number of days since unix epoch time
  chainID: BigInt! @precision(digits: 76) # chain id of the pool
  pool: String! # address of the pool
  name: String! # name of the pool
  reserve0: BigInt! @precision(digits: 76) # reserve of token0 in token units
  reserve1: BigInt! @precision(digits: 76) # reserve of token1 in token units
  totalLiquidityUSD: BigInt! @precision(digits: 76) # total liquidity of the swap pool in USD
  totalVolume0: BigInt! @precision(digits: 76) # total swap volume of token0 in token units
  totalVolume1: BigInt! @precision(digits: 76) # total swap volume of token1 in token units
  totalVolumeUSD: BigInt! @precision(digits: 76) # total swap volume of the pool in USD
  totalFees0: BigInt! @precision(digits: 76) # total fees collected in token0 units
  totalFees1: BigInt! @precision(digits: 76) # total fees collected in token1 units
  totalFeesUSD: BigInt! @precision(digits: 76) # total fees collected in USD
  numberOfSwaps: BigInt! @precision(digits: 76) # total number of swaps in the pool
  token0Price: BigInt! @precision(digits: 76) # price of token0 relative to token1
  token1Price: BigInt! @precision(digits: 76) # price of token1 relative to token0
  totalEmissions: BigInt! @precision(digits: 76) # total emissions for the pool in reward token units (VELO form Optimism and AERO for Base)
  totalEmissionsUSD: BigInt! @precision(digits: 76) # total emissions for the pool in USD
  totalBribesUSD: BigInt! @precision(digits: 76) # total bribes for the pool in USD
  lastUpdatedTimestamp: Timestamp! # timestamp of last update
}

# Daily snapshot of the LiquidityPool entity
type LiquidityPoolDailySnapshot {
  id: ID! # address of the pool - number of days since unix epoch time
  chainID: BigInt! @precision(digits: 76) # chain id of the pool
  pool: String! # address of the pool
  name: String! # name of the pool
  reserve0: BigInt! @precision(digits: 76) # reserve of token0 in token units
  reserve1: BigInt! @precision(digits: 76) # reserve of token1 in token units
  totalLiquidityUSD: BigInt! @precision(digits: 76) # total liquidity of the swap pool in USD
  totalVolume0: BigInt! @precision(digits: 76) # total swap volume of token0 in token units
  totalVolume1: BigInt! @precision(digits: 76) # total swap volume of token1 in token units
  totalVolumeUSD: BigInt! @precision(digits: 76) # total swap volume of the pool in USD
  totalFees0: BigInt! @precision(digits: 76) # total fees collected in token0 units
  totalFees1: BigInt! @precision(digits: 76) # total fees collected in token1 units
  totalFeesUSD: BigInt! @precision(digits: 76) # total fees collected in USD
  numberOfSwaps: BigInt! @precision(digits: 76) # total number of swaps in the pool
  token0Price: BigInt! @precision(digits: 76) # price of token0 relative to token1
  token1Price: BigInt! @precision(digits: 76) # price of token1 relative to token0
  totalEmissions: BigInt! @precision(digits: 76) # total emissions for the pool in reward token units (VELO form Optimism and AERO for Base)
  totalEmissionsUSD: BigInt! @precision(digits: 76) # total emissions for the pool in USD
  totalBribesUSD: BigInt! @precision(digits: 76) # total bribes for the pool in USD
  lastUpdatedTimestamp: Timestamp! # timestamp of last update
}

# Weekly snapshot of the LiquidityPool entity
type LiquidityPoolWeeklySnapshot {
  id: ID! # address of the pool - number of weeks since unix epoch time
  chainID: BigInt! @precision(digits: 76) # chain id of the pool
  pool: String! # address of the pool
  name: String! # name of the pool
  reserve0: BigInt! @precision(digits: 76) # reserve of token0 in token units
  reserve1: BigInt! @precision(digits: 76) # reserve of token1 in token units
  # totalLiquidityETH: BigInt! # total liquidity of the swap pool in ETH
  totalLiquidityUSD: BigInt! @precision(digits: 76) # total liquidity of the swap pool in USD
  totalVolume0: BigInt! @precision(digits: 76) # total swap volume of token0 in token units
  totalVolume1: BigInt! @precision(digits: 76) # total swap volume of token1 in token units
  totalVolumeUSD: BigInt! @precision(digits: 76) # total swap volume of the pool in USD
  totalFees0: BigInt! @precision(digits: 76) # total fees collected in token0 units
  totalFees1: BigInt! @precision(digits: 76) # total fees collected in token1 units
  totalFeesUSD: BigInt! @precision(digits: 76) # total fees collected in USD
  numberOfSwaps: BigInt! @precision(digits: 76) # total number of swaps in the pool
  token0Price: BigInt! @precision(digits: 76) # price of token0 relative to token1
  token1Price: BigInt! @precision(digits: 76) # price of token1 relative to token0
  totalEmissions: BigInt! @precision(digits: 76) # total emissions for the pool in reward token units (VELO form Optimism and AERO for Base)
  totalEmissionsUSD: BigInt! @precision(digits: 76) # total emissions for the pool in USD
  totalBribesUSD: BigInt! @precision(digits: 76) # total bribes for the pool in USD
  lastUpdatedTimestamp: Timestamp! # timestamp of last update
}

# Entity that tracks the latest state of the token entity
# By nature this entity saves the latest state of the token, and its state at different times should be attained from the snapshot entities
type Token {
  id: ID! # token address
  symbol: String! # token symbol
  name: String! # token name
  chainID: BigInt! @precision(digits: 76) # chain id of the token
  decimals: BigInt! @precision(digits: 76) # number of decimals
  pricePerUSDNew: BigInt! @precision(digits: 76) # price of token per USD
  lastUpdatedTimestamp: Timestamp! # timestamp of last update
  tokenHourlySnapshots: [TokenHourlySnapshot!]! @derivedFrom(field: "token") # hourly snapshots of the token
  tokenDailySnapshots: [TokenDailySnapshot!]! @derivedFrom(field: "token") # daily snapshots of the token
  tokenWeeklySnapshots: [TokenWeeklySnapshot!]! @derivedFrom(field: "token") # weekly snapshots of the token
}

# Hourly snapshot of the LiquidityPool entity
type TokenHourlySnapshot {
  id: ID! # address of the token - number of weeks since unix epoch time
  symbol: String! # token symbol
  name: String! # token name
  chainID: BigInt! @precision(digits: 76) # chain id of the token
  token: String! # token address
  pricePerUSDNew: BigInt! @precision(digits: 76) # price of token per USD
  lastUpdatedTimestamp: Timestamp! # timestamp of last update
}

# Daily snapshot of the LiquidityPool entity
type TokenDailySnapshot {
  id: ID! # address of the token - number of weeks since unix epoch time
  symbol: String! # token symbol
  name: String! # token name
  chainID: BigInt! @precision(digits: 76) # chain id of the token
  token: String! # token address
  pricePerUSDNew: BigInt! @precision(digits: 76) # price of token per USD
  lastUpdatedTimestamp: Timestamp! # timestamp of last update
}

# Weekly snapshot of the LiquidityPool entity
type TokenWeeklySnapshot {
  id: ID! # address of the token - number of weeks since unix epoch time
  symbol: String! # token symbol
  name: String! # token name
  chainID: BigInt! @precision(digits: 76) # chain id of the token
  token: String! # token address
  pricePerUSDNew: BigInt! @precision(digits: 76) # price of token per USD
  lastUpdatedTimestamp: Timestamp! # timestamp of last update
}

type CLFactory_PoolCreated {
  id: ID!
  token0: String!
  token1: String!
  tickSpacing: BigInt! @precision(digits: 76)
  pool: String!
  timestamp: Timestamp!
  chainId: Int!
}

type Gauge_NotifyReward {
  id: ID!
  from: String!
  amount: BigInt! @precision(digits: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  chainId: Int!
}

type VotingReward_NotifyReward {
  id: ID!
  from: String!
  reward: String!
  epoch: BigInt! @precision(digits: 76)
  amount: BigInt! @precision(digits: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  chainId: Int!
}

type Pool_Swap {
  id: ID!
  sender: String!
  to: String!
  amount0In: BigInt! @precision(digits: 76)
  amount1In: BigInt! @precision(digits: 76)
  amount0Out: BigInt! @precision(digits: 76)
  amount1Out: BigInt! @precision(digits: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  chainId: Int!
}

type VotingReward_Deposit {
  id: ID!
  from: String!
  tokenId: BigInt! @precision(digits: 76)
  amount: BigInt! @precision(digits: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  chainId: Int!
}

type VotingReward_Withdraw {
  id: ID!
  from: String!
  tokenId: BigInt! @precision(digits: 76)
  amount: BigInt! @precision(digits: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  chainId: Int!
}

type Voter_GaugeCreated {
  id: ID!
  poolFactory: String!
  votingRewardsFactory: String!
  gaugeFactory: String!
  pool: String!
  bribeVotingReward: String!
  feeVotingReward: String!
  gauge: String!
  creator: String!
  timestamp: Timestamp!
  chainId: Int!
}

type PoolFactory_SetCustomFee {
  id: ID!
  pool: String!
  fee: BigInt! @precision(digits: 76)
  timestamp: Timestamp!
  chainId: Int!
}

type Pool_Sync {
  id: ID!
  reserve0: BigInt! @precision(digits: 76)
  reserve1: BigInt! @precision(digits: 76)
  sourceAddress: String!
  timestamp: Timestamp!
  chainId: Int!
}

type CLPool_Burn {
  id: ID!
  owner: String!
  tickLower: BigInt! @precision(digits: 76)
  tickUpper: BigInt! @precision(digits: 76)
  amount: BigInt! @precision(digits: 76)
  amount0: BigInt! @precision(digits: 76)
  amount1: BigInt! @precision(digits: 76)
  sourceAddress: String! @index
  timestamp: Timestamp! @index
  chainId: Int! @index
}

type CLPool_Collect {
  id: ID!
  owner: String!
  recipient: String!
  tickLower: BigInt! @precision(digits: 76)
  tickUpper: BigInt! @precision(digits: 76)
  amount0: BigInt! @precision(digits: 76)
  amount1: BigInt! @precision(digits: 76)
  sourceAddress: String! @index
  timestamp: Timestamp! @index
  chainId: Int! @index
}

type CLPool_CollectFees {
  id: ID!
  recipient: String!
  amount0: BigInt! @precision(digits: 76)
  amount1: BigInt! @precision(digits: 76)
  sourceAddress: String! @index
  timestamp: Timestamp! @index
  chainId: Int! @index
}

type CLPool_Flash {
  id: ID!
  sender: String!
  recipient: String!
  amount0: BigInt! @precision(digits: 76)
  amount1: BigInt! @precision(digits: 76)
  paid0: BigInt! @precision(digits: 76)
  paid1: BigInt! @precision(digits: 76)
  sourceAddress: String! @index
  timestamp: Timestamp! @index
  chainId: Int! @index
}

type CLPool_IncreaseObservationCardinalityNext {
  id: ID!
  observationCardinalityNextOld: BigInt! @precision(digits: 76)
  observationCardinalityNextNew: BigInt! @precision(digits: 76)
  sourceAddress: String! @index
  timestamp: Timestamp! @index
  chainId: Int! @index
}

type CLPool_Initialize {
  id: ID!
  sqrtPriceX96: BigInt! @precision(digits: 76)
  tick: BigInt! @precision(digits: 76)
  sourceAddress: String! @index
  timestamp: Timestamp! @index
  chainId: Int! @index
}

type CLPool_Mint {
  id: ID!
  sender: String!
  owner: String!
  tickLower: BigInt! @precision(digits: 76)
  tickUpper: BigInt! @precision(digits: 76)
  amount: BigInt! @precision(digits: 76)
  amount0: BigInt! @precision(digits: 76)
  amount1: BigInt! @precision(digits: 76)
  sourceAddress: String! @index
  timestamp: Timestamp! @index
  chainId: Int! @index
}

type CLPool_SetFeeProtocol {
  id: ID!
  feeProtocol0Old: BigInt! @precision(digits: 76)
  feeProtocol1Old: BigInt! @precision(digits: 76)
  feeProtocol0New: BigInt! @precision(digits: 76)
  feeProtocol1New: BigInt! @precision(digits: 76)
  sourceAddress: String! @index
  timestamp: Timestamp! @index
  chainId: Int! @index
}

type CLPool_Swap {
  id: ID!
  sender: String!
  recipient: String!
  amount0: BigInt! @precision(digits: 76)
  amount1: BigInt! @precision(digits: 76)
  sqrtPriceX96: BigInt! @precision(digits: 76)
  liquidity: BigInt! @precision(digits: 76)
  tick: BigInt! @precision(digits: 76)
  sourceAddress: String! @index
  timestamp: Timestamp! @index
  chainId: Int! @index
}
